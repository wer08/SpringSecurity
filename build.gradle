import java.time.LocalDateTime

plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.14'
	id 'io.spring.dependency-management' version '1.1.2'
}

group = 'com.wojtek'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'


	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'

	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

task generatePostsAndComments(){
	doLast {
		File dataSql = file("src/main/resources/data.sql")
		dataSql.write("")
		for (i in 0..<100) {
			dataSql.append("insert into post(id, title, content, created) values (${i}, 'Test post ${i}', 'content ${i}' , '"
			+ LocalDateTime.now().minusDays(100 - i) + "');\n")
		}

		for (i in 0..<100) {
			int postId = 1 + i /10
			dataSql.append("insert into comment(id, post_id, content, created) values (${i}, '${postId}', 'comment ${i}' , '"
					+ LocalDateTime.now().minusDays(100 - i) + "');\n")
		}
	}
}
